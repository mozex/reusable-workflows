name: Tests

on:
  workflow_call:
    secrets:
      TOKEN:
        required: false
        description: 'GitHub Token used to install Composer dependencies.'
    inputs:
      php_version:
        description: 'PHP version to use.'
        required: false
        type: string
        default: '8.3'
      phpunit_config_file:
        description: 'PHPUnit configuration file.'
        required: false
        type: string
        default: 'phpunit.xml'
      custom_commands:
        description: 'Custom commands to run.'
        required: false
        type: string
        default: ''
      databases:
        description: 'Comma-separated list of database names to create'
        required: false
        type: string
        default: 'testing'
      enable_sharding:
        description: 'Enable test sharding for parallel execution'
        required: false
        type: boolean
        default: false
      shard_count:
        description: 'Number of shards to split tests into (only used when sharding is enabled)'
        required: false
        type: number
        default: 4

permissions:
  contents: write

jobs:
  pest:
    if: "!contains(github.event.head_commit.message, 'wip')"
    name: ${{ inputs.enable_sharding && format('Pest (Shard {0}/{1})', matrix.shard, inputs.shard_count) || 'Pest' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        shard: ${{ inputs.enable_sharding && fromJson(inputs.shard_count == 2 && '[1,2]' || inputs.shard_count == 3 && '[1,2,3]' || inputs.shard_count == 4 && '[1,2,3,4]' || inputs.shard_count == 5 && '[1,2,3,4,5]' || inputs.shard_count == 6 && '[1,2,3,4,5,6]' || inputs.shard_count == 7 && '[1,2,3,4,5,6,7]' || inputs.shard_count == 8 && '[1,2,3,4,5,6,7,8]' || inputs.shard_count == 9 && '[1,2,3,4,5,6,7,8,9]' || inputs.shard_count == 10 && '[1,2,3,4,5,6,7,8,9,10]' || inputs.shard_count == 12 && '[1,2,3,4,5,6,7,8,9,10,11,12]' || inputs.shard_count == 15 && '[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]' || inputs.shard_count == 16 && '[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]' || inputs.shard_count == 20 && '[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]' || '[1,2,3,4]') || fromJson('[1]') }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php_version }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
          coverage: none

      - name: Custom Commands
        if: "inputs.custom_commands != ''"
        run: ${{ inputs.custom_commands }}

      - name: Prepare The Environment
        run: cp .env.example .env

      - name: Create Database
        run: |
          sudo systemctl start mysql
          IFS=',' read -ra DB_NAMES <<< "${{ inputs.databases }}"
          for DB_NAME in "${DB_NAMES[@]}"; do
            mysql --user="root" --password="root" -e "CREATE DATABASE \`$DB_NAME\` character set UTF8mb4 collate utf8mb4_bin;"
            echo "Created database: $DB_NAME"
          done

      - name: Install Composer Dependencies
        uses: ramsey/composer-install@v3
        with:
          composer-options: "--prefer-dist --optimize-autoloader"
        env:
          COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ secrets.TOKEN }}"}}'

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'

      - name: Install Node Dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Vite Manifest
        run: yarn build

      - name: Run Tests
        if: inputs.enable_sharding == false
        run: ./vendor/bin/pest --ci -c ${{ inputs.phpunit_config_file }} --parallel --processes=2 --colors=always

      - name: Run Tests Sharded
        if: inputs.enable_sharding == true
        run: ./vendor/bin/pest --ci -c ${{ inputs.phpunit_config_file }} --parallel --colors=always --shard=${{ matrix.shard }}/${{ inputs.shard_count }}
